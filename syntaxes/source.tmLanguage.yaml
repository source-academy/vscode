scopeName: source.source
patterns:
  - include: "#restricted"
  - include: "#import-directive"
  - include: "#statement"

repository:
  restricted:
    patterns:
      - name: invalid.illegal
        match: \b(arguments|await|case|catch|class|default|delete|do|enum|eval|export|extends|finally|implements|in|instanceof|interface|new|package|private|protected|public|static|super|switch|this|throw|try|typeof|var|void|with|yield)\b

  import-directive:
    patterns:
      - name: meta.import
        begin: (import)
        beginCaptures:
          "1": { name: keyword.control.import }
        end: ;
        patterns:
          - name: keyword.control.from
            match: from
          - include: "#comment"
          - include: "#string"
          - include: "#identifier"

  #######################
  # Meta
  #######################

  statement:
    patterns:
      - include: "#comment"
      - include: "#declaration"
      - include: "#control-statement"
      - include: "#expression"
      - include: "#block"

  control-statement:
    patterns:
      - include: "#if-else-statement"
      - include: "#while"
      - include: "#for"
      - name: keyword.other.debugger
        match: \bdebugger\b
      # Consider making these keywords non-highlighted unless within right control flow
      - name: keyword.control.flow
        match: \b(break|continue)\b
      - name: keyword.control.flow
        match: \b(return)\b

  declaration:
    patterns:
      - include: "#function-declaration"
      - include: "#identifier-declaration"

  expression:
    patterns:
      - include: "#arrow-function"
      - include: "#function-call"
      - include: "#literal"
      - include: "#identifier"
      - include: "#string"
      - include: "#operators"
      - include: "#paren-expression"

  #######################
  # Statements
  #######################

  comment:
    patterns:
      - begin: ([ \t]*)(//)
        beginCaptures:
          "1": { name: punctuation.whitespace.comment.leading }
          "2": { name: comment.line.double-slash }
        end: (?=$)
        contentName: comment.line.double-slash
      - name: comment.block
        begin: /\*
        end: \*/
        captures:
          "0": { name: punctuation.definition.comment }

  block:
    patterns:
      - name: meta.block
        begin: \{
        end: \}
        beginCaptures:
          "0": { name: punctuation.section.block.begin }
        endCaptures:
          "0": { name: punctuation.section.block.end }
        patterns:
          - include: "#statement"

  #######################
  # Declarations
  #######################

  function-declaration:
    patterns:
      - name: meta.function
        begin: (function)\s?(\w+)\(([\w\s,]*)\)\s?\{
        beginCaptures:
          "1": { name: storage.type.function }
          "2": { name: entity.name.function }
          "3": { patterns: [{ include: "#identifier" }] }
        end: "}"
        patterns:
          - include: "#statement"

  identifier-declaration:
    patterns:
      - match: \b(const|let)\b(.+)=(.+)
        captures:
          "1": { name: storage.type }
          "2": { patterns: [{ include: "#identifier" }] }
          "3": { patterns: [{ include: "#expression" }] }
      - begin: \b(const|let)\b
        beginCaptures:
          "1": { name: storage.type }
        end: ;
        patterns:
          - include: "#expression"

  #######################
  # Expressions
  #######################

  literal:
    patterns:
      - include: "#numeric-literal"
      - include: "#boolean-literal"
      - include: "#null-literal"
      - include: "#undefined-literal"
      - include: "#regex-literal"
    repository:
      numeric-literal:
        patterns:
          - match: \d+(n)
            captures:
              "1": { name: invalid.illegal.storage.type.numeric.bigint }
          - name: constant.numeric.integer.decimal
            match: (\d+\.\d*|\d*\.\d+|\d+)([eE][+\-]?\d+)?
          - name: constant.language.nan
            match: \bNaN\b
          - name: constant.language.infinity
            match: \bInfinity\b
      boolean-literal:
        patterns:
          - name: constant.language.boolean.true
            match: \btrue\b
          - name: constant.language.boolean.false
            match: \bfalse\b
      null-literal:
        patterns:
          - name: constant.language.null
            match: \bnull\b
      undefined-literal:
        patterns:
          - name: constant.language.undefined
            match: \/.*?\/\bundefined\b
      regex-literal:
        patterns:
          - name: invalid.illegal.string.regexp
            begin: (?x)(?<= (=|:|return|,|\(|\[|\{|\!|\?|&&|\|\||\bcase\b) \s* )/
            beginCaptures:
              "0": { name: invalid.illegal.string.regexp }
            end: /[gimsuy]*
            endCaptures:
              "0": { name: invalid.illegal.string.regexp }
            patterns:
              - name: constant.character.escape
                match: \\.
              - name: invalid.illegal.newline
                match: \n

  string:
    patterns:
      - name: string.quoted.double
        begin: '"'
        beginCaptures:
          "0": { name: punctuation.definition.string.begin }
        end: '"'
        endCaptures:
          "0": { name: punctuation.definition.string.end }
        patterns:
          - include: "#string-character-escape"
          - match: '\\\n'
            name: constant.character.escape.newline
          - match: '\\.'
            name: constant.character.escape
      - name: string.quoted.single
        begin: "'"
        beginCaptures:
          "0": { name: punctuation.definition.string.begin }
        end: "'"
        endCaptures:
          "0": { name: punctuation.definition.string.end }
        patterns:
          - include: "#string-character-escape"
          - match: '\\\n'
            name: constant.character.escape.newline
          - match: '\\.'
            name: constant.character.escape
      - name: string.quoted.other
        begin: "`"
        end: "`"
        captures:
          "0": { patterns: [{ include: "#string-character-escape" }] }

    repository:
      string-character-escape:
        patterns:
          - name: constant.character.escape
            match: \\(?:[tv0bfnr'"\\]|u[0-9a-fA-F]{4})

  identifier:
    patterns:
      - name: variable.other.readwrite
        match: \b[_$a-zA-Z][_$a-zA-Z0-9]*\b

  arrow-function:
    patterns:
      - name: storage.type.function.arrow
        match: =>
      # Block arrow
      - name: meta.arrow
        begin: (?<=>)(?=[^;]*\{)
        end: (?<=\})
        patterns:
          - include: "#comment"
          - include: "#block"

  function-call:
    patterns:
      - name: meta.function-call
        match: (\w+)(\()([^)]*)(\))
        captures:
          "1": { name: entity.name.function }
          "2": { name: meta.brace.round }
          "3": { patterns: [{ include: "#expression" }] }
          "4": { name: meta.brace.round }
      - name: meta.function-call
        begin: (\w+)(\()
        beginCaptures:
          "1": { name: entity.name.function }
          "2": { name: meta.brace.round }
        end: \)
        endCaptures:
          "0": { name: meta.brace.round }
        patterns:
          - include: "#expression"

  paren-expression:
    begin: \(
    beginCaptures:
      "0": { name: meta.brace.round.ts }
    end: \)
    endCaptures:
      "0": { name: meta.brace.round.ts }
    patterns:
      - include: "#expression"

  operators:
    patterns:
      - name: invalid.illegal.keyword.operator.assignment.compound
        match: \+=|-=|\*=|/=|%=|\*\*=
      - name: invalid.illegal.keyword.operator.assignment.compound.logical
        match: \&&=|\|\|=|\?\?=
      - name: invalid.illegal.keyword.operator.assignment.compound.bitwise
        match: \&=|\|=|\^=|<<=|>>=|>>>=
      - name: invalid.illegal.keyword.operator.increment
        match: \+\+
      - name: invalid.illegal.keyword.operator.decrement
        match: --
      - name: invalid.illegal.keyword.operator.arithmetic
        match: \*\*
      - name: invalid.illegal.keyword.operator.logical
        match: \?\?
      - name: invalid.illegal.keyword.operator.bitwise.shift
        match: <<|>>>|>>
      - name: invalid.illegal.keyword.operator.relational
        match: <>

      - name: keyword.operator.comparison
        match: ===|!==
      - name: invalid.illegal.keyword.operator.comparison
        match: ==|!=

      - name: keyword.operator.logical
        match: \!|&&|\|\|
      - name: invalid.illegal.keyword.operator.bitwise
        match: \&|\||\^|~
      - name: keyword.operator.relational
        match: <=|>=|<|>

      - name: keyword.operator.arithmetic
        match: \+|-|\*|/|%
      - name: keyword.operator.assignment
        match: \=

  #######################
  # Control statements
  #######################

  if-else-statement:
    patterns:
      - name: expression.group
        begin: (if)\s*\((.+)\)\s*\{
        end: "}"
        beginCaptures:
          "1": { name: keyword.control.conditional }
          "2": { patterns: [{ include: "#expression" }] }
        patterns:
          - include: "#statement"
      - name: expression.group
        begin: (else)\s*\{
        end: "}"
        beginCaptures:
          "1": { name: keyword.control.conditional }
        patterns:
          - include: "#statement"
      # Match keywords even if overall structure is invalid
      - name: keyword.control.conditional
        match: \b(if|else)\b

  while:
    patterns:
      - name: expression.group
        begin: (while)\s*\((.+)\)\s*\{
        end: "}"
        beginCaptures:
          "1": { name: keyword.control.loop }
          "2": { patterns: [{ include: "#expression" }] }
        patterns:
          - include: "#statement"

  for:
    patterns:
      - name: expression.group
        begin: (for)\s*\((.+)\)\s*\{
        end: "}"
        beginCaptures:
          "1": { name: keyword.control.loop }
          "2": { patterns: [{ include: "#expression" }] }
        patterns:
          - include: "#statement"
